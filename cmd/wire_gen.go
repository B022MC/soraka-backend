// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	current_summoner2 "soraka-backend/internal/biz/current_summoner"
	"soraka-backend/internal/conf"
	"soraka-backend/internal/dal/repo/current_summoner"
	"soraka-backend/internal/infra"
	"soraka-backend/internal/router"
	"soraka-backend/internal/server"
	"soraka-backend/internal/service/lcu"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(global *conf.Global, confServer *conf.Server, data *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db, cleanup, err := infra.NewSQLite(data, logger)
	if err != nil {
		return nil, nil, err
	}
	infraData, cleanup2, err := infra.NewData(data, db)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	currentSummonerRepo := current_summoner.NewCurrentSummonerRepo(infraData, logger)
	currentSummonerUseCase := current_summoner2.NewCurrentSummonerUseCase(currentSummonerRepo, logger)
	currentSummonerService := lcu.NewCurrentSummonerService(currentSummonerUseCase)
	lcuRouter := router.NewLcuRouter(currentSummonerService)
	rootRouter := router.NewRootRouter(lcuRouter)
	ginServer := server.NewHTTPServer(confServer, logger, rootRouter)
	app := newApp(logger, ginServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
