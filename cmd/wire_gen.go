// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	client2 "github.com/B022MC/soraka-backend/internal/biz/client"
	current_summoner2 "github.com/B022MC/soraka-backend/internal/biz/current_summoner"
	"github.com/B022MC/soraka-backend/internal/conf"
	"github.com/B022MC/soraka-backend/internal/dal/repo/client"
	"github.com/B022MC/soraka-backend/internal/dal/repo/current_summoner"
	"github.com/B022MC/soraka-backend/internal/dal/repo/match"
	"github.com/B022MC/soraka-backend/internal/dal/repo/rank"
	"github.com/B022MC/soraka-backend/internal/infra"
	"github.com/B022MC/soraka-backend/internal/router"
	"github.com/B022MC/soraka-backend/internal/server"
	client3 "github.com/B022MC/soraka-backend/internal/service/client"
	"github.com/B022MC/soraka-backend/internal/service/lcu"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(global *conf.Global, confServer *conf.Server, data *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db, cleanup, err := infra.NewSQLite(data, logger)
	if err != nil {
		return nil, nil, err
	}
	lcuClient := infra.NewLCUClient(logger, global)
	infraData, cleanup2, err := infra.NewData(data, db, lcuClient)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	currentSummonerRepo := current_summoner.NewCurrentSummonerRepo(infraData, global, logger)
	rankRepo := rank.NewRankRepo(infraData, global, logger)
	matchHistoryRepo := match.NewMatchHistoryRepo(infraData, global, logger)
	gameDetailRepo := match.NewGameDetailRepo(infraData, global, logger)
	currentSummonerUseCase := current_summoner2.NewCurrentSummonerUseCase(currentSummonerRepo, rankRepo, matchHistoryRepo, gameDetailRepo, logger)
	currentSummonerService := lcu.NewCurrentSummonerService(currentSummonerUseCase)
	lcuRouter := router.NewLcuRouter(currentSummonerService)
	clientInfoRepo := client.NewClientInfoRepo(infraData, logger)
	clientInfoUseCase := client2.NewClientUseCase(clientInfoRepo, logger)
	clientInfoService := client3.NewClientInfoService(clientInfoUseCase)
	clientRouter := router.NewClientRouter(clientInfoService)
	rootRouter := router.NewRootRouter(lcuRouter, clientRouter)
	ginServer := server.NewHTTPServer(confServer, logger, rootRouter)
	app := newApp(logger, ginServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
